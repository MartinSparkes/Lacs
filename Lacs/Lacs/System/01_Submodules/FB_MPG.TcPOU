<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_MPG" Id="{86ca23c2-c29d-42ba-9329-141e9f15a6f6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MPG
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//Hardware declared here as only one will ever be connected 
	EncoderValue 		AT %I* : UINT;	//Measured Value from Encoder
	SetValueZero	 	AT %Q* : BOOL;	//Request encoder be reset to zero 	
	bX1					AT %I* : BOOL;	//Multipliers
	bX10				AT %I* : BOOL;
	bX100				AT %I* : BOOL;
	bEnabled			AT %I* : BOOL;
	
	
	eMPGState : (INIT_START, WAIT_START, RUNNING, STOPPED);	//MPG state machine defenitions
	
	nMotorStartPoisition	: UINT	;	//Where was the motor at the beginning
	nDeltaPosition			: DINT	;	//Calculated position request change from start
										//Motor value 	nMotorStartPoisition + nDeltaPosition

	nLastEncoderValue		: UINT	;	//Encoder value on last scan cycle
	nDeltaEncoder_PerScan	: DINT	;	//Encoder change per scan
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE eMPGState OF
	INIT_START:												//Holding state
		eMPGState := WAIT_START;
	
	WAIT_START:												//Holding state
		eMPGState := RUNNING;

	RUNNING:
		IF (Error_Scaler OR Error_AxisSelect) THEN			//If current error state
			//nDeltaPosition := 0;							//No change in position possible	
		ELSE
			//Update values
			nDeltaEncoder_PerScan  := nLastEncoderValue - EncoderValue;
			nDeltaPosition := nDeltaPosition + nDeltaEncoder_PerScan * ScaleFactor;			
		END_IF

	STOPPED:
		//Do nothing
END_CASE

nLastEncoderValue := EncoderValue;	//Ensure next scan always sees change in encoder position]]></ST>
    </Implementation>
    <Property Name="Error" Id="{ecdf36d9-fbaf-4cd8-bf8a-e26069870eef}">
      <Declaration><![CDATA[PROPERTY PUBLIC Error : Bool]]></Declaration>
      <Get Name="Get" Id="{d5526351-497b-4690-b926-6483b85f0d07}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[//System in any error or any condition other than running.

Error := FALSE;

IF (Error_AxisSelect OR Error_Scaler) THEN
	Error := TRUE;
END_IF

IF eMPGState <> RUNNING THEN
	Error := TRUE;
END_IF
 ]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error_AxisSelect" Id="{2a4e321f-811f-4262-a299-3a5e11b9487f}">
      <Declaration><![CDATA[PROPERTY PRIVATE Error_AxisSelect : Bool]]></Declaration>
      <Get Name="Get" Id="{cdec9763-27fd-4c77-8034-2b248cd06209}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error_Scaler" Id="{fce49344-80e8-4e26-9c77-7fec1fcc8447}">
      <Declaration><![CDATA[PROPERTY PRIVATE Error_Scaler : Bool]]></Declaration>
      <Get Name="Get" Id="{469ea559-20cc-444e-8bde-7efb06ac9ac5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[//Error conditions
IF bX1 AND bX10 THEN
	Error_Scaler := TRUE;
	RETURN;
END_IF

IF bX1 AND bX100 THEN
	Error_Scaler := TRUE;
	RETURN;
END_IF

IF bX10 AND bX100 THEN
	Error_Scaler := TRUE;
	RETURN;
END_IF

IF NOT bX1 AND NOT bX10 AND NOT bX100 THEN
	Error_Scaler := TRUE;
	RETURN;
END_IF

Error_Scaler := FALSE;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ScaleFactor" Id="{7a71058e-65f2-4243-97bc-5e309c667473}">
      <Declaration><![CDATA[//Returns the scale factor to be used on the new data
PROPERTY PRIVATE ScaleFactor : UINT]]></Declaration>
      <Get Name="Get" Id="{040a8495-d5e6-4d3b-8727-782b8c6582d8}">
        <Declaration><![CDATA[VAR

END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[//Depending on what IO is connected send back 1, 10, 100 or set error!
IF bX1 THEN
	ScaleFactor := 1;
END_IF

IF bX10 THEN
	ScaleFactor := 10;
END_IF

IF bX100 THEN
	ScaleFactor := 100;
END_IF



]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Start" Id="{041e362b-9db0-4fff-aafd-c4ad1987e207}">
      <Declaration><![CDATA[METHOD PUBLIC Start
VAR_INPUT
	nMotorStartPoisition	:	UINT ;	//Check that this is passed to the "main"
										//May need to be implicitly defined.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eMPGState := INIT_START;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Starting" Id="{f6649c59-5513-4a63-b3e5-cdba9759c7a4}">
      <Declaration><![CDATA[PROPERTY Starting : Bool]]></Declaration>
      <Get Name="Get" Id="{90477962-ec61-4ae0-b358-95796823c82a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF (eMPGState = INIT_START OR eMPGState = WAIT_START) THEN
	Starting := TRUE;
	ELSE
	Starting := FALSE;				
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Stop" Id="{721c28d1-5acc-46bf-b254-7241c63d0365}">
      <Declaration><![CDATA[METHOD PUBLIC Stop
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eMPGState := E_PMLState.STOPPED;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Value" Id="{1a784deb-81ed-475c-82e7-8f94e4a35191}">
      <Declaration><![CDATA[PROPERTY Value : UINT		//Calculated ABS position value requested by MPG, check Error before use.]]></Declaration>
      <Get Name="Get" Id="{4e03f040-7b24-41de-8cea-d51cff1970d6}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value := DINT_TO_UINT(nMotorStartPoisition + nDeltaPosition);
//What is the form needed for motor position??]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>